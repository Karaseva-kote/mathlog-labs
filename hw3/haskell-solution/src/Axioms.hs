module Axioms where
  
  import Data.List (intercalate)
  
  data Axiom = DocAxiom

  instance Show Axiom where
    show DocAxiom = intercalate "\n" (docA1 ++ docA2 ++ docA5 ++ docA6 ++ docA7 ++ docA8 ++ docAA ++ docAB)

  docA1 :: [String]
  docA1 = 
    ["a=b->a'=b'",
     "(a=b->a'=b')->(0=0->0=0->0=0)->(a=b->a'=b')",
     "(0=0->0=0->0=0)->(a=b->a'=b')",
     "(0=0->0=0->0=0)->(@b.(a=b->a'=b'))",
     "(0=0->0=0->0=0)->(@a.(@b.(a=b->a'=b')))",
     "(0=0->0=0->0=0)",
     "(@a.(@b.(a=b->a'=b')))"]

  docA2 :: [String]
  docA2 = 
    ["a=b->a=c->b=c",
     "(a=b->a=c->b=c)->(0=0->0=0->0=0)->(a=b->a=c->b=c)",
     "(0=0->0=0->0=0)->a=b->a=c->b=c",
     "(0=0->0=0->0=0)->@c.(a=b->a=c->b=c)",
     "(0=0->0=0->0=0)->@b.@c.(a=b->a=c->b=c)",
     "(0=0->0=0->0=0)->@a.@b.@c.(a=b->a=c->b=c)",
     "@a.@b.@c.(a=b->a=c->b=c)"]

  docA5 :: [String]
  docA5 = 
    ["a+b'=(a+b)'",
     "(a+b'=(a+b)')->(0=0->0=0->0=0)->(a+b'=(a+b)')",
     "(0=0->0=0->0=0)->(a+b'=(a+b)')",
     "(0=0->0=0->0=0)->(@b.(a+b'=(a+b)'))",
     "(0=0->0=0->0=0)->(@a.(@b.(a+b'=(a+b)')))",
     "(@a.(@b.(a+b'=(a+b)')))"]

  docA6 :: [String]
  docA6 = 
    ["a+0=a",
     "(a+0=a)->(0=0->0=0->0=0)->(a+0=a)",
     "(0=0->0=0->0=0)->(a+0=a)",
     "(0=0->0=0->0=0)->(@a.(a+0=a))",
     "(@a.(a+0=a))"]
  
  docA7 :: [String]
  docA7 = 
    ["a*0=0",
     "(a*0=0)->(0=0->0=0->0=0)->(a*0=0)",
     "(0=0->0=0->0=0)->(a*0=0)",
     "(0=0->0=0->0=0)->(@a.(a*0=0))",
     "(@a.(a*0=0))"]

  docA8 :: [String]
  docA8 = 
    ["a*b'=a*b+a",
     "(a*b'=a*b+a)->(0=0->0=0->0=0)->(a*b'=a*b+a)",
     "(0=0->0=0->0=0)->(a*b'=a*b+a)",
     "(0=0->0=0->0=0)->@b.(a*b'=a*b+a)",
     "(0=0->0=0->0=0)->(@a.(@b.(a*b'=a*b+a)))",
     "(@a.(@b.(a*b'=a*b+a)))"]

  docAA :: [String]
  docAA = 
    ["(@a.@b.@c.(a=b->a=c->b=c))->(@b.@c.((a+0)=b->(a+0)=c->b=c))",
     "@b.@c.(a+0=b->a+0=c->b=c)",
     "(@b.@c.(a+0=b->a+0=c->b=c))->(@c.(a+0=a->a+0=c->a=c))",
     "@c.(a+0=a->a+0=c->a=c)",
     "(@c.(a+0=a->a+0=c->a=c))->(a+0=a->a+0=a->a=a)",
     "a+0=a->a+0=a->a=a",
     "a+0=a->a=a",
     "a=a",
     "(a=a)->(0=0->0=0->0=0)->(a=a)",
     "(0=0->0=0->0=0)->(a=a)",
     "(0=0->0=0->0=0)->@a.(a=a)",
     "@a.(a=a)"]

  docAB :: [String]
  docAB = 
    ["(@a.@b.@c.(a=b->a=c->b=c))->(@b.@c.(a=b->a=c->b=c))",
     "(@b.@c.(a=b->a=c->b=c))",
     "(@b.@c.(a=b->a=c->b=c))->(@c.(a=b->a=c->b=c))",
     "(@c.(a=b->a=c->b=c))",
     "(@c.(a=b->a=c->b=c))->(a=b->a=a->b=a)",
     "a=b->a=a->b=a",
     "a=a->a=b->a=a",
     "a=b->a=a",
     "(a=b->a=a)->((a=b)->(a=a)->(b=a))->((a=b)->(b=a))",
     "((a=b)->(a=a)->(b=a))->((a=b)->(b=a))",
     "(a=b)->(b=a)",
     "((a=b)->(b=a))->(0=0->0=0->0=0)->((a=b)->(b=a))",
     "(0=0->0=0->0=0)->((a=b)->(b=a))",
     "(0=0->0=0->0=0)->(@b.((a=b)->(b=a)))",
     "(0=0->0=0->0=0)->(@a.@b.((a=b)->(b=a)))",
     "@a.(@b.((a=b)->(b=a)))"]